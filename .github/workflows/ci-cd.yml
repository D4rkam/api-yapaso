name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Job de pruebas y verificaciones
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Configurar Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache de dependencias pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Instalar dependencias del sistema
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc default-libmysqlclient-dev pkg-config

    - name: Instalar dependencias Python
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black mypy

    - name: Verificar formato de c√≥digo con Black
      run: black --check app/

    - name: Verificar estilo de c√≥digo con Flake8
      run: flake8 app/ --max-line-length=88 --extend-ignore=E203,W503

    - name: Verificar tipos con MyPy
      run: mypy app/ --ignore-missing-imports
      continue-on-error: true  # MyPy puede fallar en algunos casos, no es cr√≠tico

    - name: Ejecutar tests
      env:
        DB_HOST: localhost
        DB_PORT: 3306
        DB_DATABASE: test_db
        DB_USER: test_user
        DB_PASSWORD: test_password
        SECRET_KEY: test_secret_key_for_ci
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term
      continue-on-error: true  # Los tests pueden no existir a√∫n

    - name: Subir cobertura a Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
      continue-on-error: true

  # Job de construcci√≥n Docker
  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login a Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      if: github.ref == 'refs/heads/main'

    - name: Extraer metadatos
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: yapaso/api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Construir y push imagen Docker
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job de despliegue (solo en main)
  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://your-api-domain.com

    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Desplegar a producci√≥n
      run: |
        echo "üöÄ Desplegando a producci√≥n..."
        # TODO: Agregar comandos de despliegue real
        echo "‚úÖ Despliegue completado"

  # Job de notificaciones
  notify:
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()

    steps:
    - name: Notificar resultado
      run: |
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ]; then
          echo "‚úÖ Pipeline completado exitosamente"
        else
          echo "‚ùå Pipeline fall√≥"
        fi